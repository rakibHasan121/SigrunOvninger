Uppgift 6a – Växel tillbaka med TDD
Skriv ett program som beräknar hur mycket växel som ska ges tillbaka.
Indata till programmet är det pris man ska betala samt det belopp man betalar med. Läs och skriv
till/från kommandoraden.
Beräkna hur många 1000-lappar, 500-lappar, 200-lappar, 100-lappar, 50-lappar, 20-lappar, 10-kronor,
5-kronor, 2-kronor och enkronor man ska få tillbaka utifrån, av användaren, givna belopp.
Växeln ska alltid innehålla så mycket som möjligt av högsta möjliga valörer
Skriv helst testerna först, koden sen. Om det känns väldigt svårt är det bättre att fuska med detta än att
inte skriva nån kod alls
Ledtrådar:
Innan du sätter igång, fundera över vad som måste hända:
• Du måste räkna ut växeln (utifrån pris och lämnade pengar)
• Du måste hålla reda på vilka valörer som finns
• Rekommendation är att lägga dessa värden i en lista som du itererar över när du räknar ut
hur mycket av varje valör som ska ges tillbaka
• Du måste räkna ut hur många enheter av en valör som ska ges i växeln
• När du har räknat ut hur många antal (y) av valör x som ska ges i växel måste du subtrahera
dessa från växeln inför nästa iteration Ex: antag att växeln är 654, då ska du ge 6st 100-
lappar, sen måste du dra av 600 innan du räknar ut hur många 50-lappar som ska ges
Alla dessa punkter lämpar sig väl för att skriva enhetstester på!!!

Uppgift 6b – Växel tillbaka, TDD, formattering
När räkneverket funkar är det dags att fixa snygga utskrifter. Fixa din lösning så att varje rad ser ut
enligt följande:
Antal 20-lappar: 3
Antal 10-kronor: 1
• Du ska skriva ut ”kronor” när valörerna är 1,2,3,5,10.
• Du ska skriva ut ”lappar” när valörerna är 20, 50, 100, 200, 500, 1000.
• Om användaren betalar med jämna pengar ska en utskrift som säger ”Det blev ingen växel” skrivas ut
• Om användaren betalar för lite ska en utskrift som säger ”Du lämnade för lite pengar” visas
• Skriv tester för ovanstående krav och implementera sen koden

Uppgift 6c – StringBuilder
I din lösning till uppgift 3a, ändra så att svaret skrivs ut mha en StringBuilder. Testerna ska inte
behöva ändras iom. denna ändring.

Uppgift 6d – StringBuilder
Dags att lägga till tester för inläsnignen, implementera följande:
• Lägg till en publik test-parameter så att ni kan skilja på om ni befinner er i test-läge eller inte.
• Skriv tester som testar er inläsning
• Skriv tester som testar att de exception som ni slänger verkligen slängs.
• Formatera om koden så att inläsningen görs i en egen metod
• Se till att alla tester går gröna.